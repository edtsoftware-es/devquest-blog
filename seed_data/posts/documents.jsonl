{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct", "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74", "updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Getting Started with React Hooks", "image": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop", "duration": 8, "slug": "getting-started-react-hooks", "content": "React Hooks revolutionized how we write React components. In this comprehensive guide, we'll explore the most commonly used hooks and how they can simplify your code.\n\n## useState Hook\n\nThe useState hook allows you to add state to functional components:\n\n```javascript\nconst [count, setCount] = useState(0);\n```\n\n## useEffect Hook\n\nThe useEffect hook lets you perform side effects in your components:\n\n```javascript\nuseEffect(() => {\n  document.title = `Count: ${count}`;\n}, [count]);\n```\n\nHooks make your code more reusable and easier to test. Start incorporating them into your React projects today!", "excerpt": "Learn how React Hooks can revolutionize your component development with this comprehensive beginner's guide.", "tags": ["react", "javascript", "hooks", "frontend"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct", "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74", "updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Building Scalable APIs with Node.js", "image": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=800&h=400&fit=crop", "duration": 12, "slug": "building-scalable-apis-nodejs", "content": "Creating scalable APIs is crucial for modern web applications. Node.js provides excellent tools and patterns for building robust backend services.\n\n## Express.js Framework\n\nExpress.js is the most popular Node.js framework:\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/users', (req, res) => {\n  res.json({ users: [] });\n});\n```\n\n## Database Integration\n\nChoose the right database for your needs:\n- MongoDB for document storage\n- PostgreSQL for relational data\n- Redis for caching\n\n## Authentication & Security\n\nImplement proper authentication using JWT tokens and secure your endpoints with middleware.", "excerpt": "Master the art of building scalable and secure APIs using Node.js and modern best practices.", "tags": ["nodejs", "api", "backend", "express"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "CSS Grid vs Flexbox: When to Use Each", "image": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=400&fit=crop", "duration": 6, "slug": "css-grid-vs-flexbox", "content": "CSS Grid and Flexbox are both powerful layout systems, but they serve different purposes. Understanding when to use each will make you a more effective frontend developer.\n\n## Flexbox: One-Dimensional Layouts\n\nFlexbox excels at:\n- Aligning items in a single row or column\n- Distributing space between items\n- Centering content\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n## CSS Grid: Two-Dimensional Layouts\n\nCSS Grid is perfect for:\n- Complex page layouts\n- Creating responsive grids\n- Overlapping elements\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n```\n\n## Conclusion\n\nUse Flexbox for component-level layouts and CSS Grid for page-level layouts. Often, you'll use both together!", "excerpt": "Understand the key differences between CSS Grid and Flexbox and learn when to use each layout system.", "tags": ["css", "flexbox", "grid", "layout", "frontend"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Introduction to TypeScript", "image": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?w=800&h=400&fit=crop", "duration": 10, "slug": "introduction-typescript", "content": "TypeScript adds static typing to JavaScript, making your code more reliable and easier to maintain. Let's explore the basics.\n\n## Basic Types\n\nTypeScript provides several basic types:\n\n```typescript\nlet name: string = 'John';\nlet age: number = 30;\nlet isActive: boolean = true;\nlet hobbies: string[] = ['reading', 'coding'];\n```\n\n## Interfaces\n\nDefine the shape of objects with interfaces:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst user: User = {\n  id: 1,\n  name: 'John Doe',\n  email: 'john@example.com'\n};\n```\n\n## Functions\n\nType your function parameters and return values:\n\n```typescript\nfunction greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n```\n\nTypeScript catches errors at compile time, saving you from runtime bugs!", "excerpt": "Get started with TypeScript and learn how static typing can improve your JavaScript development experience.", "tags": ["typescript", "javascript", "types", "development"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Modern JavaScript ES6+ Features", "image": "https://images.unsplash.com/photo-1579468118864-1b9ea3c0db4a?w=800&h=400&fit=crop", "duration": 15, "slug": "modern-javascript-es6-features", "content": "JavaScript has evolved significantly with ES6 and beyond. Let's explore the most important modern features every developer should know.\n\n## Arrow Functions\n\nConcise function syntax:\n\n```javascript\n// Traditional function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n```\n\n## Destructuring\n\nExtract values from arrays and objects:\n\n```javascript\nconst user = { name: 'John', age: 30 };\nconst { name, age } = user;\n\nconst numbers = [1, 2, 3];\nconst [first, second] = numbers;\n```\n\n## Template Literals\n\nString interpolation made easy:\n\n```javascript\nconst message = `Hello, ${name}! You are ${age} years old.`;\n```\n\n## Async/Await\n\nHandle asynchronous code elegantly:\n\n```javascript\nasync function fetchUser(id) {\n  try {\n    const response = await fetch(`/api/users/${id}`);\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    console.error('Error fetching user:', error);\n  }\n}\n```\n\nThese features make JavaScript more powerful and enjoyable to work with!", "excerpt": "Explore the most important ES6+ features that every modern JavaScript developer should master.", "tags": ["javascript", "es6", "modern", "features"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Database Design Best Practices", "image": "https://images.unsplash.com/photo-1544383835-bda2bc66a55d?w=800&h=400&fit=crop", "duration": 20, "slug": "database-design-best-practices", "content": "Good database design is the foundation of any successful application. Here are the key principles and best practices to follow.\n\n## Normalization\n\nNormalize your database to reduce redundancy:\n\n### First Normal Form (1NF)\n- Each column contains atomic values\n- No repeating groups\n\n### Second Normal Form (2NF)\n- Must be in 1NF\n- All non-key attributes depend on the entire primary key\n\n### Third Normal Form (3NF)\n- Must be in 2NF\n- No transitive dependencies\n\n## Indexing Strategy\n\nCreate indexes on:\n- Primary keys (automatic)\n- Foreign keys\n- Frequently queried columns\n- Columns used in WHERE clauses\n\n```sql\nCREATE INDEX idx_user_email ON users(email);\nCREATE INDEX idx_post_author ON posts(author_id);\n```\n\n## Naming Conventions\n\n- Use consistent naming patterns\n- Table names should be plural (users, posts)\n- Column names should be descriptive\n- Use snake_case for consistency\n\n## Data Types\n\nChoose appropriate data types:\n- Use VARCHAR with appropriate length limits\n- Use INT for whole numbers\n- Use DECIMAL for monetary values\n- Use TIMESTAMP for date/time data\n\nFollowing these practices will result in a maintainable and performant database!", "excerpt": "Learn essential database design principles and best practices for creating efficient and maintainable database schemas.", "tags": ["database", "sql", "design", "best-practices"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Getting Started with Docker", "image": "https://images.unsplash.com/photo-1605745341112-85968b19335b?w=800&h=400&fit=crop", "duration": 18, "slug": "getting-started-docker", "content": "Docker revolutionizes how we develop, ship, and run applications. Learn the fundamentals of containerization.\n\n## What is Docker?\n\nDocker is a platform that uses containerization to package applications with their dependencies.\n\n## Basic Concepts\n\n### Images\nRead-only templates used to create containers:\n\n```dockerfile\nFROM node:16\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n\n### Containers\nRunning instances of Docker images:\n\n```bash\ndocker run -p 3000:3000 my-app\n```\n\n## Docker Compose\n\nManage multi-container applications:\n\n```yaml\nversion: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_PASSWORD: password\n```\n\n## Benefits\n\n- Consistent environments\n- Easy deployment\n- Scalability\n- Isolation\n\nStart containerizing your applications today!", "excerpt": "Master Docker fundamentals and learn how containerization can streamline your development workflow.", "tags": ["docker", "containers", "devops", "deployment"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Web Performance Optimization", "image": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop", "duration": 14, "slug": "web-performance-optimization", "content": "Website performance directly impacts user experience and SEO rankings. Here's how to optimize your web applications.\n\n## Core Web Vitals\n\nGoogle's Core Web Vitals measure user experience:\n\n### Largest Contentful Paint (LCP)\n- Target: < 2.5 seconds\n- Optimize images and fonts\n- Use CDN for faster delivery\n\n### First Input Delay (FID)\n- Target: < 100 milliseconds\n- Minimize JavaScript execution time\n- Use web workers for heavy tasks\n\n### Cumulative Layout Shift (CLS)\n- Target: < 0.1\n- Set dimensions for images and videos\n- Avoid inserting content above existing content\n\n## Image Optimization\n\n```html\n<!-- Use modern formats -->\n<picture>\n  <source srcset=\"image.webp\" type=\"image/webp\">\n  <source srcset=\"image.avif\" type=\"image/avif\">\n  <img src=\"image.jpg\" alt=\"Description\" loading=\"lazy\">\n</picture>\n```\n\n## Code Splitting\n\nSplit your JavaScript bundles:\n\n```javascript\n// Dynamic imports\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\n// Route-based splitting\nconst Home = lazy(() => import('./pages/Home'));\nconst About = lazy(() => import('./pages/About'));\n```\n\n## Caching Strategies\n\n- Browser caching with proper headers\n- Service workers for offline functionality\n- CDN for static assets\n\nOptimizing performance is an ongoing process that pays dividends in user satisfaction!", "excerpt": "Learn proven techniques to optimize web performance and improve Core Web Vitals scores.", "tags": ["performance", "optimization", "web-vitals", "frontend"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Understanding Git Workflows", "image": "https://images.unsplash.com/photo-1556075798-4825dfaaf498?w=800&h=400&fit=crop", "duration": 16, "slug": "understanding-git-workflows", "content": "Git workflows help teams collaborate effectively. Let's explore the most popular workflows and when to use them.\n\n## Git Flow\n\nA branching model with specific branch types:\n\n- **main**: Production-ready code\n- **develop**: Integration branch\n- **feature**: New features\n- **release**: Prepare releases\n- **hotfix**: Critical fixes\n\n```bash\n# Start a new feature\ngit flow feature start new-login\n\n# Finish the feature\ngit flow feature finish new-login\n```\n\n## GitHub Flow\n\nSimpler workflow for continuous deployment:\n\n1. Create a branch from main\n2. Make changes and commit\n3. Open a pull request\n4. Review and merge\n5. Deploy from main\n\n```bash\n# Create and switch to feature branch\ngit checkout -b feature/user-authentication\n\n# Make changes and commit\ngit add .\ngit commit -m \"Add user authentication\"\n\n# Push and create PR\ngit push origin feature/user-authentication\n```\n\n## GitLab Flow\n\nCombines feature-driven development with issue tracking:\n\n- Environment branches (staging, production)\n- Release branches for versioning\n- Integration with CI/CD pipelines\n\n## Best Practices\n\n- Write clear commit messages\n- Keep commits atomic\n- Use meaningful branch names\n- Review code before merging\n- Protect main branch\n\nChoose the workflow that fits your team's needs and stick to it consistently!", "excerpt": "Master different Git workflows and learn how to choose the right branching strategy for your team.", "tags": ["git", "workflow", "version-control", "collaboration"], "published": true}
{"authorId":"jx71j8308fjjd1t6gvr11pbet57qfzct",  "categoryId":"kh73q66kvn1atyt59aehdcxecx7qha74","updatedAt":1715879172882, "likesCount":0, "commentsCount":0, "title": "Introduction to GraphQL", "image": "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=400&fit=crop", "duration": 22, "slug": "introduction-graphql", "content": "GraphQL is a query language and runtime for APIs that gives clients the power to ask for exactly what they need.\n\n## Why GraphQL?\n\n### Problems with REST\n- Over-fetching: Getting more data than needed\n- Under-fetching: Multiple requests for related data\n- Versioning challenges\n\n### GraphQL Solutions\n- Single endpoint\n- Flexible queries\n- Strong type system\n- Real-time subscriptions\n\n## Schema Definition\n\nDefine your API schema:\n\n```graphql\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n}\n\ntype Query {\n  users: [User!]!\n  user(id: ID!): User\n  posts: [Post!]!\n}\n\ntype Mutation {\n  createUser(name: String!, email: String!): User!\n  createPost(title: String!, content: String!, authorId: ID!): Post!\n}\n```\n\n## Queries\n\nFetch exactly what you need:\n\n```graphql\nquery GetUserWithPosts {\n  user(id: \"1\") {\n    name\n    email\n    posts {\n      title\n      content\n    }\n  }\n}\n```\n\n## Mutations\n\nModify data:\n\n```graphql\nmutation CreatePost {\n  createPost(\n    title: \"My New Post\"\n    content: \"This is the content\"\n    authorId: \"1\"\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n## Resolvers\n\nImplement the logic:\n\n```javascript\nconst resolvers = {\n  Query: {\n    users: () => users,\n    user: (parent, { id }) => users.find(user => user.id === id),\n  },\n  Mutation: {\n    createUser: (parent, { name, email }) => {\n      const user = { id: generateId(), name, email };\n      users.push(user);\n      return user;\n    },\n  },\n  User: {\n    posts: (user) => posts.filter(post => post.authorId === user.id),\n  },\n};\n```\n\nGraphQL provides a more efficient and flexible way to build APIs!", "excerpt": "Discover GraphQL and learn how it solves common API problems with flexible queries and strong typing.", "tags": ["graphql", "api", "backend", "queries"], "published": false}
